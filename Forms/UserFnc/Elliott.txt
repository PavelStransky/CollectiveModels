%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Calculates the energies of Elliott model %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
N = _p1;   %% Number of valence particles

%% Calculate spectrum for given N
qn = list();

%% (2N, 0) + (2N - 4, 2) + ...
for(mu = 0; (2 * N - 2 * mu) >= 0;
(lambda = 2 * N - 2 * mu;

 for(k = int(min(vector(lambda; mu)));
  k >= 0;
  (if(k > 0; 

   %% Case with k != 0
   (for((kmax = k + int(max(vector(mu; lambda)));
     l = k); 
    l <= kmax;
    (c1 = lambda * lambda + mu * mu + lambda * mu + 3 * lambda + 3 * mu;
     c2 = l * (l + 1);

     e = -(c1 - 3 * c2 / 4.0);
     add(qn; vector(double(lambda); double(mu); double(k); double(l); double(e)));

     l = l + 1)));

   %% Case with k == 0
   (for(l = int(max(vector(mu; lambda)));
    l >= 0;
    (c1 = lambda * lambda + mu * mu + lambda * mu + 3 * lambda + 3 * mu;
     c2 = l * (l + 1);

     e = -(c1 - 3 * c2 / 4.0);
     add(qn; vector(double(lambda); double(mu); double(k); double(l); double(e)));

     l = l - 2))));
 
  k = k - 2));

 mu = mu + 2));

%% (2N - 6, 0) + (2N - 10, 2) + ...
for(mu = 0; (2 * N - 6 - 2 * mu) >= 0;
(lambda = 2 * N - 6 - 2 * mu;

 for(k = int(min(vector(lambda; mu)));
  k >= 0;
  (if(k > 0; 

   %% Case with k != 0
   (for((kmax = k + int(max(vector(mu; lambda)));
     l = k); 
    l <= kmax;
    (c1 = lambda * lambda + mu * mu + lambda * mu + 3 * lambda + 3 * mu;
     c2 = l * (l + 1);

     e = -(c1 - 3 * c2 / 4.0);
     add(qn; vector(double(lambda); double(mu); double(k); double(l); double(e)));

     l = l + 1)));

   %% Case with k == 0
   (for(l = int(max(vector(mu; lambda)));
    l >= 0;
    (c1 = lambda * lambda + mu * mu + lambda * mu + 3 * lambda + 3 * mu;
     c2 = l * (l + 1);

     e = -(c1 - 3 * c2 / 4.0);
     add(qn; vector(double(lambda); double(mu); double(k); double(l); double(e)));

     l = l - 2))));
 
  k = k - 2));

 mu = mu + 2));

%% Show levels
lambda = qn[0][0]; 
mu = qn[0][1]; 
k = qn[0][2]; 

levels = list();
j = 0;

for(i = 0; i < length(qn)[0];
(if(lambda != qn[i][0] ||
    mu != qn[i][1] ||
    k != qn[i][2];
  (lambda = qn[i][0];
  mu = qn[i][1];
  k = qn[i][2];
  j = j + 1));
 
 add(levels; pointvector(vector(j; j + 1); vector(qn[i][4]; qn[i][4])));
 i = i + 1));

levels = toarray(levels);

show(graph(levels); "Levels");
printline(qn);

clear(lambda; mu; N);
clear(i; j; k; l);
clear(c1; c2);
clear(e);
